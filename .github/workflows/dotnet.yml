name: .NET CI/CD

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            runtime: win-x64
            shell: pwsh
          - os: ubuntu-latest
            runtime: linux-x64
            shell: pwsh
          - os: macos-latest
            runtime: osx-x64
            shell: pwsh

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Verify .NET installation
      run: dotnet --info

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore --verbosity minimal

    - name: Build solution (Debug)
      run: dotnet build --configuration Debug --no-restore --verbosity minimal

    - name: Build solution (Release)
      run: dotnet build --configuration Release --no-restore --verbosity minimal

    - name: Run unit tests
      run: |
        dotnet test tests/Unit/PSPredictor.Tests.csproj `
          --configuration Release `
          --no-build `
          --verbosity minimal `
          --logger trx `
          --results-directory TestResults/Unit `
          --collect:"XPlat Code Coverage"
      continue-on-error: false

    - name: Run core tests
      run: |
        dotnet test tests/Core.Tests/PSPredictor.Core.Tests.csproj `
          --configuration Release `
          --no-build `
          --verbosity minimal `
          --logger trx `
          --results-directory TestResults/Core `
          --collect:"XPlat Code Coverage"
      continue-on-error: false

    - name: Run completion tests
      run: |
        dotnet test tests/Completion.Tests/PSPredictor.Completion.Tests.csproj `
          --configuration Release `
          --no-build `
          --verbosity minimal `
          --logger trx `
          --results-directory TestResults/Completion `
          --collect:"XPlat Code Coverage"
      continue-on-error: false

    - name: Run AI tests
      run: |
        dotnet test tests/AI.Tests/PSPredictor.AI.Tests.csproj `
          --configuration Release `
          --no-build `
          --verbosity minimal `
          --logger trx `
          --results-directory TestResults/AI `
          --collect:"XPlat Code Coverage"
      continue-on-error: false

    - name: Run integration tests
      run: |
        dotnet test tests/Integration.Tests/PSPredictor.Integration.Tests.csproj `
          --configuration Release `
          --no-build `
          --verbosity minimal `
          --logger trx `
          --results-directory TestResults/Integration `
          --collect:"XPlat Code Coverage"
      continue-on-error: false

    - name: Install PowerShell (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          # Install PowerShell on Ubuntu
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
        elif [ "$RUNNER_OS" == "macOS" ]; then
          # Install PowerShell on macOS
          brew install --cask powershell
        fi
      shell: bash

    - name: Test module loading
      run: |
        $modulePath = "./src/PSPredictor/bin/Release/net9.0/PSPredictor.dll"
        if (Test-Path $modulePath) {
          Write-Host "Module found at: $modulePath"
          try {
            Import-Module $modulePath -Force -ErrorAction Stop
            Write-Host "✅ Module loaded successfully"
            
            # Test basic cmdlets
            $status = Get-Command Get-PSPredictorStatus -ErrorAction SilentlyContinue
            if ($status) {
              Write-Host "✅ Get-PSPredictorStatus cmdlet available"
            } else {
              Write-Host "❌ Get-PSPredictorStatus cmdlet not found"
            }
          } catch {
            Write-Host "❌ Failed to load module: $_"
            exit 1
          }
        } else {
          Write-Host "❌ Module not found at expected path: $modulePath"
          exit 1
        }

    - name: Create NuGet packages
      run: dotnet pack --configuration Release --no-build --verbosity minimal --output ./packages

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: TestResults/
        retention-days: 7

    - name: Upload packages
      uses: actions/upload-artifact@v4
      if: matrix.os == 'windows-latest'
      with:
        name: nuget-packages
        path: ./packages/*.nupkg
        retention-days: 30

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.os == 'windows-latest'
      with:
        name: coverage-reports
        path: TestResults/**/coverage.cobertura.xml
        retention-days: 7