name: Publish to PowerShell Gallery

on:
  push:
    branches: [ main ]
    paths:
      - 'src/PSPredictor.psd1'
      - 'src/PSPredictor.psm1'
      - 'tests/**'
      - '.github/workflows/publish.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/PSPredictor.psd1'
      - 'src/PSPredictor.psm1'
      - 'tests/**'
      - '.github/workflows/publish.yml'
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish even if version exists'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write  # Required for creating releases
  packages: read

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Module
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check PowerShell version
      shell: pwsh
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "Platform: $($PSVersionTable.Platform)"

    - name: Install required modules
      shell: pwsh
      run: |
        Write-Host "Installing required PowerShell modules..."
        Install-Module -Name PSReadLine -Force -Scope CurrentUser -SkipPublisherCheck -AllowClobber
        Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck -AllowClobber
        Write-Host "‚úÖ Required modules installed"

    - name: Test module manifest
      shell: pwsh
      run: |
        Write-Host "üîç Testing module manifest..."
        $manifest = Test-ModuleManifest -Path './src/PSPredictor.psd1'
        Write-Host "‚úÖ Module manifest is valid"
        Write-Host "  Name: $($manifest.Name)"
        Write-Host "  Version: $($manifest.Version)"
        Write-Host "  Author: $($manifest.Author)"
        Write-Host "  PowerShell Version: $($manifest.PowerShellVersion)"

    - name: Test module import
      shell: pwsh
      run: |
        Write-Host "üîç Testing module import..."
        Import-Module './src/PSPredictor.psm1' -Force -Verbose
        Write-Host "‚úÖ Module imported successfully"
        
        Write-Host "üîç Testing exported functions..."
        $functions = Get-Command -Module PSPredictor
        Write-Host "‚úÖ Found $($functions.Count) exported functions:"
        $functions | ForEach-Object { Write-Host "  - $($_.Name)" }

    - name: Run build and test
      shell: pwsh
      run: |
        Write-Host "üî® Running build and test..."
        ./build.ps1 -Task Test -Verbose
        Write-Host "‚úÖ Build and test completed successfully"

  publish:
    needs: test
    runs-on: ubuntu-latest
    name: Publish to PowerShell Gallery
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check PowerShell version
      shell: pwsh
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"

    - name: Install required modules
      shell: pwsh
      run: |
        Write-Host "Installing PowerShellGet..."
        Install-Module -Name PowerShellGet -Force -Scope CurrentUser -SkipPublisherCheck
        Install-Module -Name PSReadLine -Force -Scope CurrentUser -SkipPublisherCheck

    - name: Get module version
      id: version
      shell: pwsh
      run: |
        $manifest = Import-PowerShellDataFile -Path './src/PSPredictor.psd1'
        $version = $manifest.ModuleVersion
        Write-Host "Module version: $version"
        Write-Output "MODULE_VERSION=$version" >> $env:GITHUB_OUTPUT

    - name: Check if version exists
      id: version_check
      shell: pwsh
      run: |
        try {
          $existing = Find-Module -Name PSPredictor -RequiredVersion ${{ steps.version.outputs.MODULE_VERSION }} -Repository PSGallery -ErrorAction SilentlyContinue
          if ($existing) {
            Write-Host "‚ö†Ô∏è Version ${{ steps.version.outputs.MODULE_VERSION }} already exists in PowerShell Gallery"
            Write-Output "VERSION_EXISTS=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "‚úÖ Version ${{ steps.version.outputs.MODULE_VERSION }} is new"
            Write-Output "VERSION_EXISTS=false" >> $env:GITHUB_OUTPUT
          }
        } catch {
          Write-Host "‚úÖ Version ${{ steps.version.outputs.MODULE_VERSION }} is new (module not found)"
          Write-Output "VERSION_EXISTS=false" >> $env:GITHUB_OUTPUT
        }

    - name: Build module
      shell: pwsh
      run: |
        Write-Host "üî® Building module..."
        ./build.ps1 -Task Build -Verbose
        Write-Host "‚úÖ Module built successfully"

    - name: Publish to PowerShell Gallery
      if: steps.version_check.outputs.VERSION_EXISTS == 'false' || github.event.inputs.force_publish == 'true'
      shell: pwsh
      env:
        PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
      run: |
        if ([string]::IsNullOrEmpty($env:PSGALLERY_API_KEY)) {
          Write-Error "‚ùå PSGALLERY_API_KEY secret is not set"
          exit 1
        }
        
        Write-Host "üì§ Publishing PSPredictor v${{ steps.version.outputs.MODULE_VERSION }} to PowerShell Gallery..."
        
        try {
          ./build.ps1 -Task Publish -ApiKey $env:PSGALLERY_API_KEY -Verbose
          Write-Host "‚úÖ Successfully published PSPredictor v${{ steps.version.outputs.MODULE_VERSION }}"
          Write-Host "üîó Module available at: https://www.powershellgallery.com/packages/PSPredictor/${{ steps.version.outputs.MODULE_VERSION }}"
        } catch {
          Write-Error "‚ùå Failed to publish module: $_"
          exit 1
        }

    - name: Create GitHub Release
      if: steps.version_check.outputs.VERSION_EXISTS == 'false' || github.event.inputs.force_publish == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ steps.version.outputs.MODULE_VERSION }}"
        name: "PSPredictor v${{ steps.version.outputs.MODULE_VERSION }}"
        body: |
          ## PSPredictor v${{ steps.version.outputs.MODULE_VERSION }}
          
          üöÄ **Auto-published to PowerShell Gallery**
          
          ### Installation
          ```powershell
          Install-Module -Name PSPredictor -Scope CurrentUser
          Import-Module PSPredictor
          Install-PSPredictor
          ```
          
          ### Links
          - üì¶ [PowerShell Gallery](https://www.powershellgallery.com/packages/PSPredictor/${{ steps.version.outputs.MODULE_VERSION }})
          - üìö [Documentation](https://github.com/wangkanai/PSPredictor#readme)
          - üêõ [Report Issues](https://github.com/wangkanai/PSPredictor/issues)
          
          ### What's Changed
          - Enhanced PowerShell CLI completions
          - Cross-platform compatibility improvements
          - Performance optimizations
          
          **Full Changelog**: https://github.com/wangkanai/PSPredictor/commits/v${{ steps.version.outputs.MODULE_VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true

    - name: Skip publishing (version exists)
      if: steps.version_check.outputs.VERSION_EXISTS == 'true' && github.event.inputs.force_publish != 'true'
      run: |
        echo "‚è≠Ô∏è Skipping publish - version ${{ steps.version.outputs.MODULE_VERSION }} already exists"
        echo "üí° To force publish, increment the version in PSPredictor.psd1 or use workflow_dispatch with force_publish=true"