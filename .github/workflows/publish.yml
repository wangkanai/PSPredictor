name: Publish to PowerShell Gallery

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 2.0.0-alpha.1)'
        required: true
        type: string

permissions:
  contents: write
  releases: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is-prerelease: ${{ steps.extract-version.outputs.is-prerelease }}
    
    steps:
    - name: Extract version from tag or input
      id: extract-version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          # Extract version from tag (remove 'v' prefix)
          VERSION="${GITHUB_REF#refs/tags/v}"
        else
          # Use manual input
          VERSION="${{ github.event.inputs.version }}"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if it's a prerelease (contains -, alpha, beta, rc, etc.)
        if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
          if [[ "$VERSION" =~ - ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ùå Invalid version format: $VERSION"
          exit 1
        fi
        
        echo "üì¶ Publishing version: $VERSION"
        echo "üè∑Ô∏è Is prerelease: $([ "$VERSION" =~ - ] && echo "true" || echo "false")"

  build-and-package:
    name: Build and Package
    runs-on: windows-latest
    needs: validate-version
    environment: 
      name: ${{ needs.validate-version.outputs.is-prerelease == 'true' && 'prerelease' || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Update version in Directory.Build.props
      run: |
        $version = "${{ needs.validate-version.outputs.version }}"
        $buildPropsPath = "Directory.Build.props"
        $content = Get-Content $buildPropsPath -Raw
        $updatedContent = $content -replace '<Version>.*</Version>', "<Version>$version</Version>"
        Set-Content $buildPropsPath $updatedContent -NoNewline
        Write-Host "‚úÖ Updated version to: $version"
      shell: pwsh

    - name: Restore dependencies
      run: dotnet restore --verbosity minimal

    - name: Build solution (Release)
      run: dotnet build --configuration Release --no-restore --verbosity minimal

    - name: Run core tests
      run: |
        dotnet test tests/Unit/PSPredictor.Tests.csproj `
          --configuration Release `
          --no-build `
          --verbosity minimal `
          --logger "console;verbosity=minimal"

        dotnet test tests/Core.Tests/PSPredictor.Core.Tests.csproj `
          --configuration Release `
          --no-build `
          --verbosity minimal `
          --logger "console;verbosity=minimal"
      shell: pwsh

    - name: Test module loading
      run: |
        $modulePath = "./src/PSPredictor/bin/Release/net8.0/PSPredictor.dll"
        if (Test-Path $modulePath) {
          Write-Host "‚úÖ Module found at: $modulePath"
          try {
            Import-Module $modulePath -Force -ErrorAction Stop
            Write-Host "‚úÖ Module loaded successfully"
            
            # Test basic cmdlets exist
            $commands = @(
              'Get-PSPredictorStatus',
              'Set-PSPredictorMode',
              'Install-PSPredictor'
            )
            
            foreach ($cmd in $commands) {
              $cmdlet = Get-Command $cmd -ErrorAction SilentlyContinue
              if ($cmdlet) {
                Write-Host "‚úÖ $cmd cmdlet available"
              } else {
                Write-Host "‚ùå $cmd cmdlet not found"
                throw "$cmd cmdlet not found"
              }
            }
          } catch {
            Write-Host "‚ùå Failed to load or test module: $_"
            exit 1
          }
        } else {
          Write-Host "‚ùå Module not found at expected path: $modulePath"
          exit 1
        }
      shell: pwsh

    - name: Create packages
      run: |
        dotnet pack src/PSPredictor/PSPredictor.csproj `
          --configuration Release `
          --no-build `
          --verbosity minimal `
          --output ./packages `
          -p:IncludeSymbols=true `
          -p:SymbolPackageFormat=snupkg
      shell: pwsh


    - name: Create GitHub Release
      if: github.event_name == 'push'
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: PSPredictor ${{ needs.validate-version.outputs.version }}
        body: |
          ## PSPredictor ${{ needs.validate-version.outputs.version }}
          
          üöÄ **C# Binary Module - Advanced PowerShell Command-Line Enhancement**
          
          ### üì¶ Installation
          ```powershell
          Install-Module PSPredictor -RequiredVersion ${{ needs.validate-version.outputs.version }}
          ```
          
          ### ‚ú® Key Features
          - **AI-Powered Predictions**: ML.NET integration with embedded models
          - **Advanced Editing**: Cmd/Emacs/Vi editing modes with customizable key bindings
          - **Real-time Syntax Highlighting**: PowerShell and CLI tool syntax coloring
          - **Intelligent Auto-completion**: 26+ CLI tools with context-aware suggestions
          - **Cross-platform Support**: Windows, Linux, and macOS compatibility
          - **Performance Optimized**: <100ms response time for predictions
          
          ### üîÑ Migration from v1.x
          This is a major version update with breaking changes. See migration guide in documentation.
          
          ### üìã Full Changelog
          See [CHANGELOG.md](https://github.com/wangkanai/PSPredictor/blob/main/CHANGELOG.md) for detailed changes.
          
          ### üìñ Documentation
          - [User Guide](https://github.com/wangkanai/PSPredictor/blob/main/docs/user-guide/)
          - [Architecture Documentation](https://github.com/wangkanai/PSPredictor/blob/main/docs/architecture/)
          - [API Reference](https://github.com/wangkanai/PSPredictor/blob/main/docs/api/)
        draft: false
        prerelease: ${{ needs.validate-version.outputs.is-prerelease == 'true' }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: packages-${{ needs.validate-version.outputs.version }}
        path: ./packages/*.nupkg
        retention-days: 90

  publish-to-powershell-gallery:
    name: Publish to PowerShell Gallery
    runs-on: windows-latest
    needs: [validate-version, build-and-package]
    if: success()
    environment: 
      name: ${{ needs.validate-version.outputs.is-prerelease == 'true' && 'prerelease' || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: packages-${{ needs.validate-version.outputs.version }}
        path: ./packages

    - name: Publish to PowerShell Gallery
      run: |
        $ErrorActionPreference = "Stop"
        $apiKey = "${{ secrets.PSGALLERY_API_KEY }}"
        
        # Validate API key
        if ([string]::IsNullOrEmpty($apiKey)) {
          Write-Host "‚ö†Ô∏è PSGALLERY_API_KEY not found, skipping PowerShell Gallery publish"
          exit 0
        }
        
        if ($apiKey.Length -lt 32) {
          Write-Host "‚ùå PSGALLERY_API_KEY appears to be invalid (too short)"
          exit 1
        }
        
        Write-Host "üöÄ Publishing to PowerShell Gallery"
        
        # Validate packages directory exists
        if (-not (Test-Path "./packages")) {
          Write-Host "‚ùå Packages directory not found"
          exit 1
        }
        
        # Find the main package (not symbols)
        $packages = Get-ChildItem ./packages -Filter "PSPredictor.*.nupkg" | Where-Object { $_.Name -notlike "*symbols*" }
        
        if ($packages.Count -eq 0) {
          Write-Host "‚ùå No PSPredictor packages found in ./packages"
          Write-Host "Available files:"
          Get-ChildItem ./packages | ForEach-Object { Write-Host "  - $($_.Name)" }
          exit 1
        }
        
        if ($packages.Count -gt 1) {
          Write-Host "‚ö†Ô∏è Multiple packages found, using the first one:"
          $packages | ForEach-Object { Write-Host "  - $($_.Name)" }
        }
        
        $package = $packages[0]
        Write-Host "üì¶ Publishing package: $($package.Name)"
        Write-Host "üìÇ Package path: $($package.FullName)"
        Write-Host "üìä Package size: $([math]::Round($package.Length / 1MB, 2)) MB"
        
        try {
          # Validate the package before publishing
          Write-Host "üîç Validating package structure..."
          
          # Check if it's a valid NuGet package by attempting to read it
          $tempDir = Join-Path $env:TEMP "package-validation-$(Get-Random)"
          New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
          
          try {
            # Extract and validate package contents
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory($package.FullName, $tempDir)
            
            # Check for required files
            $requiredFiles = @("PSPredictor.psd1", "PSPredictor.dll")
            $missingFiles = @()
            
            foreach ($file in $requiredFiles) {
              if (-not (Get-ChildItem -Path $tempDir -Recurse -Name $file -ErrorAction SilentlyContinue)) {
                $missingFiles += $file
              }
            }
            
            if ($missingFiles.Count -gt 0) {
              Write-Host "‚ùå Package validation failed - missing required files:"
              $missingFiles | ForEach-Object { Write-Host "  - $_" }
              exit 1
            }
            
            Write-Host "‚úÖ Package validation passed"
            
          } finally {
            # Clean up temporary directory
            if (Test-Path $tempDir) {
              Remove-Item -Path $tempDir -Recurse -Force -ErrorAction SilentlyContinue
            }
          }
          
          # Publish to PowerShell Gallery with retry logic
          $maxRetries = 3
          $retryCount = 0
          $published = $false
          
          while (-not $published -and $retryCount -lt $maxRetries) {
            try {
              $retryCount++
              if ($retryCount -gt 1) {
                Write-Host "üîÑ Retry attempt $retryCount of $maxRetries..."
                Start-Sleep -Seconds (5 * $retryCount)  # Exponential backoff
              }
              
              Publish-Module -Path $package.FullName -NuGetApiKey $apiKey -Repository PSGallery -Force -Verbose
              $published = $true
              Write-Host "‚úÖ Successfully published to PowerShell Gallery"
              
            } catch {
              Write-Host "‚ùå Publish attempt $retryCount failed: $($_.Exception.Message)"
              if ($retryCount -eq $maxRetries) {
                throw
              }
            }
          }
          
        } catch {
          Write-Host "‚ùå Failed to publish to PowerShell Gallery: $($_.Exception.Message)"
          Write-Host "Exception details: $($_.Exception.ToString())"
          exit 1
        }
      shell: pwsh
      env:
        PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}