name: Test Module

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/test.yml'
      - 'build.ps1'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            pwsh: true
          - os: windows-latest
            pwsh: true
          - os: macos-latest
            pwsh: true
    
    name: Test on ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check PowerShell version
      shell: pwsh
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "Platform: $($PSVersionTable.Platform)"

    - name: Install required modules
      shell: pwsh
      run: |
        Write-Host "Installing required PowerShell modules..."
        Install-Module -Name PSReadLine -Force -Scope CurrentUser -SkipPublisherCheck -AllowClobber -WarningAction SilentlyContinue
        Write-Host "‚úÖ Required modules installed"

    - name: Test module manifest
      shell: pwsh
      run: |
        Write-Host "üîç Testing module manifest..."
        $manifest = Test-ModuleManifest -Path './src/PSPredictor.psd1'
        Write-Host "‚úÖ Module manifest is valid"
        Write-Host "  Name: $($manifest.Name)"
        Write-Host "  Version: $($manifest.Version)"
        Write-Host "  Author: $($manifest.Author)"
        Write-Host "  PowerShell Version: $($manifest.PowerShellVersion)"

    - name: Test module import
      shell: pwsh
      run: |
        Write-Host "üîç Testing module import..."
        Import-Module './src/PSPredictor.psm1' -Force -WarningAction SilentlyContinue
        Write-Host "‚úÖ Module imported successfully"
        
        $functions = Get-Command -Module PSPredictor
        Write-Host "‚úÖ Found $($functions.Count) exported functions"

    - name: Run Pester tests
      shell: pwsh
      run: |
        Write-Host "üß™ Running Pester tests..."
        
        # Install Pester if not available
        if (-not (Get-Module Pester -ListAvailable)) {
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck -AllowClobber -WarningAction SilentlyContinue
        }
        Import-Module Pester -Force -WarningAction SilentlyContinue
        
        # Run tests
        $PesterConfig = @{
          Path = './tests'
          Output = 'Normal'
          PassThru = $true
        }
        
        $TestResults = Invoke-Pester @PesterConfig
        
        if ($TestResults.FailedCount -gt 0) {
          Write-Error "‚ùå $($TestResults.FailedCount) test(s) failed"
          exit 1
        }
        
        Write-Host "‚úÖ All $($TestResults.PassedCount) Pester tests passed" -ForegroundColor Green

    - name: Test basic functionality
      shell: pwsh
      run: |
        Write-Host "üîç Testing basic functionality..."
        Import-Module './src/PSPredictor.psm1' -Force -WarningAction SilentlyContinue
        
        # Test Get-PSPredictorTools
        $tools = Get-PSPredictorTools
        Write-Host "‚úÖ Found $($tools.Count) supported tools"
        
        # Test configuration
        Set-PSPredictorConfig -MaxSuggestions 10
        Write-Host "‚úÖ Configuration test passed"
        
        Write-Host "‚úÖ All basic functionality tests passed"

    - name: Run build and test
      shell: pwsh
      run: |
        Write-Host "üî® Running build and test..."
        ./build.ps1 -Task Test
        Write-Host "‚úÖ Build and test completed successfully"

    - name: Test module installation (simulation)
      shell: pwsh
      run: |
        Write-Host "üîç Testing module installation simulation..."
        ./build.ps1 -Task Install -Force
        Write-Host "‚úÖ Module installation test passed"